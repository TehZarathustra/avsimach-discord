const {cloneDeep} = require('lodash');
const {
	isPolite,
	isRude,
	rollByChance,
	cleanFromPoliteAndRude,
	getRandomByLength
} = require('./utils');

const NO_MEMES_RESPONSE = {
	mig21: [
		'—Ç–∞–ª–æ–Ω—ã –Ω–∞ –º–∏–≥ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å',
		'—Ç–∞–ª–æ–Ω—ã –Ω–∞ —Ñ–∏—à–±–µ–¥ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å',
		'—Ç–∞–ª–æ–Ω–æ–≤ –Ω–∞ –±–∞–ª–∞–ª–∞–π–∫—É –±–æ–ª—å—à–µ –Ω–µ—Ç',
		'–≤–æ—Ç –±—ã –±—ã–ª —Ç–∞–ª–æ–Ω –Ω–∞ –º–∏–≥...'
	],
	default: [
		'—Ç–∞–ª–æ–Ω—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å',
		'—Ç–∞–ª–æ–Ω –±—ã',
		'–æ—á–µ–Ω—å —Ö–æ—á–µ—Ç—Å—è —Ç–∞–ª–æ–Ω',
		'–Ω—É–∂–µ–Ω —Ç–∞–ª–æ–Ω',
		'—Ç–∞–ª–æ–Ω–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç',
		'–Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ —Ç–∞–ª–æ–Ω–æ–≤',
		'—â–∞ –±—ã —Ç–∞–ª–æ–Ω'
	],
	vote: [
		'—Ç–∞–ª–æ–Ω—ã –Ω–∞ –¥–µ–º–æ–∫—Ä–∞—Ç–∏—é –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å'
	]
};

const memesCountInit = {
	default: {
		count: 0,
		limit: 4,
		label: '–º–µ–º—ã'
	},
	mig21: {
		count: 0,
		limit: 4,
		label: '–ú–∏–ì'
	},
	vote: {
		count: 0,
		limit: 1,
		label: '–¥–µ–º–æ–∫—Ä–∞—Ç–∏—é'
	}
};

const MEME_RESET_TIME = 60000 * 65;

let memesCount = cloneDeep(memesCountInit);

let memesInterval = setInterval(() => {
	memesCount = cloneDeep(memesCountInit);
}, MEME_RESET_TIME);

function askForMeme(message, memeType, memeFn) {
	const isRudeImage = 'https://i.imgur.com/80PqAGP.png';

	message.content = cleanFromPoliteAndRude(message.content);

	if (isRude(message.content)) {
		console.log('isRude >>>');

		return message.reply(isRudeImage);
	}

	if (isPolite(message.content)) {
		console.log('isPolite >>>');

		if (rollByChance(0.25)) {
			message.react('üê¨');

			return _proceedMeme(message, memeType, memeFn, true);
		}
	}

	if (!_isCouponAvailable(memeType)) {
		return _noCouponsAvailable(message, memeType);
	}

	_proceedMeme(message, memeType, memeFn);
}

function _proceedMeme(message, memeType, memeFn, options = {}) {
	const {isFree} = options;

	if (!isFree) {
		_takeCoupon(memeType);
	}

	memeFn(message);
}

function _takeCoupon(memeType) {
	memesCount[memeType].count++;
}

function _isCouponAvailable(memeType) {
	const meme = memesCount[memeType];
	const {count, limit} = meme;

	return count < limit;
}

function _noCouponsAvailable(message, type) {
	const noMemeResponse = NO_MEMES_RESPONSE[type];
	const responseLength = noMemeResponse.length;

	message.reply(noMemeResponse[getRandomByLength(responseLength)]);
}

const memesLeft = {
	pattern: /–Ω–∞—á–∞–ª—å–Ω–∏–∫, —Å–∫–æ–ª—å–∫–æ —Ç–∞–ª–æ–Ω–æ–≤|–Ω–∞—á–∞–ª—å–Ω–∏–∫, —Å–∫–æ–ª—å–∫–æ –º–µ–º–æ–≤|–Ω–∞—á–∞–ª—å–Ω–∏–∫, —á–µ –ø–æ —Ç–∞–ª–æ–Ω–∞–º|–Ω–∞—á–∞–ª—å–Ω–∏–∫, —á–µ –ø–æ –º–µ–º–∞–º/i,
	reply: message => {
		const response = Object.values(memesCount).map((item, index) => {
			const {count, limit, label} = item;
			const memesLeft = limit - count;

			return `${memesLeft} –Ω–∞ ${label}`;
		});

		message.reply(response.join(', '));
	}
}

module.exports = {
	askForMeme,
	memesLeft
};
